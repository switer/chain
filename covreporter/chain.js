displayFile("<div class=\"file\">\n  <h2 id=\"chain.js\"> chain.js</h2>\n  <div id=\"stats\">\n    <div class=\"linecoverage\">\n      <span class=\"linecov high\">\n        [98.52%]\n      </span>\n      <span>133/135<span>\n      <span class=\"misses\">\n        2\n      </span>\n    </div>\n    <div class=\"branchcoverage\">\n      <span class=\"branchcov high\">\n        [98.63%]\n      </span>\n      <span>72/73</span>\n      <span class=\"misses\">\n        1\n      </span>\n    </div>\n  </div>\n  <table id=\"source\">\n    <thead>\n      <tr>\n        <th>Line</th>\n        <th>Hits</th>\n        <th>Source</th>\n      </tr>\n    </thead>\n    <tbody>\n      \n      \n      \n        \n        \n            <tr>\n              <td class=\"line\">1</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/*</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">2</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  chainjs</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">3</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  http://github.com/switer/chainjs</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">4</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">5</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  Copyright (c) 2013 \"switer\" guankaishe</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">6</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  Licensed under the MIT license.</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">7</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  https://github.com/switer/chainjs/blob/master/LICENSE</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">8</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">9</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">10</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">'use strict';</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">11</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">12</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/*******************************</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">13</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">          Chain</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">14</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">*******************************/</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">15</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">function Bootstrap () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">16</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    var chain = new Chain()</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">17</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (arguments.length) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">18</td>\n              <td class=\"hits\">26</td>\n              <td class=\"source\">        pushHandlers(chain, arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">19</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">20</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    return chain</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">21</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">22</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">23</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  Turn a regular node function into chain function</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">24</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">25</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">Bootstrap.thunk = function (fn) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">26</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">    return function (chain) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">27</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        var args = utils.slice(arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">28</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        args.shift()</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">29</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        args.push(chain.next)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">30</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        fn.apply(null, args)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">31</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">32</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">33</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">34</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  Chainjs Constructor</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">35</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">36</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">function Chain() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">37</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    this.props = {}</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">38</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    this.state = {}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">39</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">40</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    this.props._context = this</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">41</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    this.props._data = {}</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">42</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    this.props._nodes = new LinkNodes()</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">43</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    this.props._finals =[]</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">44</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">45</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">46</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">Chain.prototype = {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">47</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">48</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Define a chain node</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">49</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     **/</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">50</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    then: function() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">51</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">52</td>\n              <td class=\"hits\">31</td>\n              <td class=\"source\">        pushHandlers(this, arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">53</td>\n              <td class=\"hits\">31</td>\n              <td class=\"source\">        return this</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">54</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">55</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    some: function() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">56</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">57</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">        var node = pushHandlers(this, arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">58</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (node.items.length) node.type = 'some'</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">59</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">        return this</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">60</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">61</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    each: function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">62</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">63</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        var that = this</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">64</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        var args = utils.slice(arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">65</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        args = utils.type(args[0]) == 'array' ? args[0]:args</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">66</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        utils.each(args, function (item) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">67</td>\n              <td class=\"hits\">6</td>\n              <td class=\"source\">            pushNode.call(that, item)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">68</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        })</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">69</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        return this</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">70</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">71</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">72</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  @RuntimeMethod only be called in runtime</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">73</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Check current node states and execulate nextNode</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">74</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     **/</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">75</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    next: function() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">76</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._end || this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">77</td>\n              <td class=\"hits\">85</td>\n              <td class=\"source\">        var args = utils.slice(arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">78</td>\n              <td class=\"hits\">85</td>\n              <td class=\"source\">        var node</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">79</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        // Deal with current step</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">80</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.__id) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">81</td>\n              <td class=\"hits\">52</td>\n              <td class=\"source\">            node = this.props._nodes.get(this.__id)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">82</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            if (node.state._isDone) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">83</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            else if (this.__branchGoto) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">84</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                // skip another if-else</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">85</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">86</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            else if (node.state._multiple && node.type == 'some') {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">87</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                if (!node.state._pending) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">88</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                if (~node.state._dones.indexOf(this.__index)) node.state._dones.push(this.__index)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">89</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                if (node.state._dones.length >= 1) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">90</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">                node.state._pending = true</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">91</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            } </td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">92</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            else if (node.state._multiple) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">93</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                if (!node.state._pending) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">94</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                if (!~node.state._dones.indexOf(this.__index)) node.state._dones.push(this.__index)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">95</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                if (node.state._dones.length != node.items.length) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">96</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">                node.state._pending = true</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">97</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">98</td>\n              <td class=\"hits\">38</td>\n              <td class=\"source\">            node.state._isDone = true</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">99</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">100</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        // Get next node</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">101</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.__branchGoto) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">102</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">            node = this.props._nodes.getByProp('name', this.__branchGoto)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">103</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            if (!node) throw new Error('Branch is not exist !')</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">104</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            if (this.__id && !this.props._nodes.isNextTo(node.id, this.__id)) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">105</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">                throw new Error('Can not goto previous step !')</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">106</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">107</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        } else {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">108</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            if (this.props._nodes.isLast(this.__id)) return this.end.apply(this, arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">109</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            if (!this.__id) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">110</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">                node = this.props._nodes.first()</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">111</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            } else {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">112</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                // here the node never the last only</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">113</td>\n              <td class=\"hits\">29</td>\n              <td class=\"source\">                node = this.props._nodes.next(this.__id)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">114</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">115</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            // Get next step and skip branch step recursively</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">116</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            while (node && node.type == 'branch') {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">117</td>\n              <td class=\"hits\">3</td>\n              <td class=\"source\">                node = this.props._nodes.next(node.id)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">118</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">119</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            // all step is over call final step</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">120</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            if (!node) return this.end.apply(this, arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">121</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">122</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        // node handler is not set</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">123</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (!node.items.length) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">124</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        // Mutiple handlers in a node</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">125</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (node.items.length > 1) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">126</td>\n              <td class=\"hits\">8</td>\n              <td class=\"source\">            node.state._multiple = true</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">127</td>\n              <td class=\"hits\">8</td>\n              <td class=\"source\">            node.state._pending = true</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">128</td>\n              <td class=\"hits\">8</td>\n              <td class=\"source\">            node.state._dones = []</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">129</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">130</td>\n              <td class=\"hits\">63</td>\n              <td class=\"source\">        var that = this</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">131</td>\n              <td class=\"hits\">63</td>\n              <td class=\"source\">        utils.each(node.items, function(item, index) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">132</td>\n              <td class=\"hits\">73</td>\n              <td class=\"source\">            var xArgs = utils.slice(args)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">133</td>\n              <td class=\"hits\">73</td>\n              <td class=\"source\">            var chainDummy = {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">134</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                __id: node.id,</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">135</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                __index: index,</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">136</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                __callee: item,</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">137</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                __arguments: xArgs,</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">138</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">139</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                state: that.state,</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">140</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                props: that.props</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">141</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">142</td>\n              <td class=\"hits\">73</td>\n              <td class=\"source\">            chainDummy.__proto__ = that.__proto__</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">143</td>\n              <td class=\"hits\">73</td>\n              <td class=\"source\">            chainDummy.next = utils.bind(chainDummy.__proto__.next, chainDummy)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">144</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">145</td>\n              <td class=\"hits\">73</td>\n              <td class=\"source\">            xArgs.unshift(chainDummy)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">146</td>\n              <td class=\"hits\">73</td>\n              <td class=\"source\">            item.apply(that.props._context, xArgs)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">147</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        })</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">148</td>\n              <td class=\"hits\">63</td>\n              <td class=\"source\">        return this</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">149</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">150</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    nextTo: function (branch) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">151</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">152</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">153</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        utils.want(branch, 'string')</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">154</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        this.__branchGoto = branch</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">155</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        var args = utils.slice(arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">156</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        args.shift()</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">157</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        this.next.apply(this, args)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">158</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">159</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    branch: function (branch, func) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">160</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">161</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">162</td>\n              <td class=\"hits\">7</td>\n              <td class=\"source\">        utils.want(branch, 'string')</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">163</td>\n              <td class=\"hits\">7</td>\n              <td class=\"source\">        utils.missing(func, 'handler')</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">164</td>\n              <td class=\"hits\">7</td>\n              <td class=\"source\">        var node = pushNode.call(this, func)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">165</td>\n              <td class=\"hits\">7</td>\n              <td class=\"source\">        node.type = 'branch'</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">166</td>\n              <td class=\"hits\">7</td>\n              <td class=\"source\">        node.name = branch</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">167</td>\n              <td class=\"hits\">7</td>\n              <td class=\"source\">        return this</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">168</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">169</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">170</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  @RuntimeMethod only be called in runtime</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">171</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Run current step once again</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">172</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     **/</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">173</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    retry: function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">174</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._end || this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">175</td>\n              <td class=\"hits\">3</td>\n              <td class=\"source\">        this.__callee.apply(this.props._context, this.__arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">176</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">177</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">178</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  @RuntimeMethod only be called in runtime</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">179</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Just a shortcut for setTimeout(chain.next, time)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">180</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     **/</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">181</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    wait: function(time) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">182</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">183</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        var that = this</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">184</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        var args = utils.slice(arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">185</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        args.shift()</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">186</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        setTimeout(function() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">187</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">            that.next.apply(that, args)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">188</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }, time)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">189</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">190</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">191</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  @RuntimeMethod only be called in runtime</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">192</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Save, Update, Get data in current chain instance</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">193</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">194</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    data: function(key, data) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">195</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">196</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">        var args = utils.slice(arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">197</td>\n              <td class=\"hits\">5</td>\n              <td class=\"source\">        var len = args.length</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">198</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        // set data</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">199</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (len >= 2 ) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">200</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">            this.props._data[key] = data</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">201</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">            return this</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">202</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">203</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        // get data value by key</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">204</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        else if (len === 1 && utils.type(key) == 'object') {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">205</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            for (var k in key) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">206</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">                 this.props._data[k] = key[k]</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">207</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">208</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">209</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        else if (len === 1) return this.props._data[key]</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">210</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        // return all data of currently chain</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">211</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        else return utils.merge({}, this.props._data)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">212</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">213</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">214</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Start running current chain</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">215</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">216</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    start: function() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">217</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._end || this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">218</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">219</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">        this.next.apply(this, arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">220</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">        return this</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">221</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">222</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">223</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  @RuntimeMethod</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">224</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Ending current chain and call final step</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">225</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">226</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    end: function() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">227</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._end || this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">228</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">        this.state._end = true</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">229</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">        utils.batch.apply(utils, [this.props._context, this.props._finals, this].concat(utils.slice(arguments)) )</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">230</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">        return this</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">231</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">232</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">233</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  All step is over or call chain.end() will be call final step handlers</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">234</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">235</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    final: function (handler) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">236</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">237</td>\n              <td class=\"hits\">12</td>\n              <td class=\"source\">        this.props._finals.push(handler)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">238</td>\n              <td class=\"hits\">12</td>\n              <td class=\"source\">        return this</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">239</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">240</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">241</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  @RuntimeMethod</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">242</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Destroy current chain, but it don't call final step</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">243</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     **/</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">244</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    destroy: function() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">245</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        this.state._destroy = true</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">246</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        this.props._context = null</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">247</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        this.props._data = null</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">248</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        this.props._nodes = null</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">249</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        this.props._finals = null</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">250</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        setAlltoNoop(this, ['then', 'some', 'next', 'nextTo', 'branch', 'retry', 'wait', 'data', 'start', 'end', 'final', 'destroy'])</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">251</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        return this</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">252</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">253</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">254</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Binding each step handler with specified context</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">255</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">256</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    context: function(ctx) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">257</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.state._destroy) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">258</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        this.props._context = ctx</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">259</td>\n              <td class=\"hits\">2</td>\n              <td class=\"source\">        return this</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">260</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">261</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">262</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">Chain.prototype.constructor = Chain</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">263</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">264</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">265</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  Push a step node to LinkNodes</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">266</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">267</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">function pushNode( /*handler1, handler2, ..., handlerN*/ ) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">268</td>\n              <td class=\"hits\">75</td>\n              <td class=\"source\">    var node = {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">269</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        items: utils.slice(arguments),</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">270</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        state: {}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">271</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">272</td>\n              <td class=\"hits\">75</td>\n              <td class=\"source\">    var id = this.props._nodes.add(node)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">273</td>\n              <td class=\"hits\">75</td>\n              <td class=\"source\">    node.id = id</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">274</td>\n              <td class=\"hits\">75</td>\n              <td class=\"source\">    return node</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">275</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">276</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">277</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  Push functions to step node</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">278</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">279</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">function pushHandlers (chain, args) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">280</td>\n              <td class=\"hits\">62</td>\n              <td class=\"source\">    return pushNode.apply(chain, utils.type(args[0]) == 'array' ? args[0]:args)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">281</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">282</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">283</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">function noop () {}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">284</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">285</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  Call by destroy step</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">286</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">287</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">function setAlltoNoop (obj, methods) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">288</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    utils.each(methods, function (method) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">289</td>\n              <td class=\"hits\">12</td>\n              <td class=\"source\">        obj[method] = noop</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">290</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    })</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">291</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">292</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">293</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">294</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  Util functions</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">295</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> **/</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">296</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">var utils = {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">297</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">298</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     * forEach</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">299</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     * I don't want to import underscore, it looks like so heavy if using in chain</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">300</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">301</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    each: function(obj, iterator, context) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">302</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (!obj) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">303</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        else if (obj.forEach) obj.forEach(iterator)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">304</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        else if (obj.length == +obj.length) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">305</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            for (var i = 0; i < obj.length; i++) iterator.call(context, obj[i], i)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">306</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        } else {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">307</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            for (var key in obj) iterator.call(context, obj[key], key)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">308</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">309</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">310</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    some: function (arr, iterator) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">311</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (!arr) return</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">312</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        else if (arr.some) arr.forEach(iterator)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">313</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        else {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">314</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            for (var i = 0; i < arr.length; i++) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"miss-branch\">\n              <td class=\"line\">315</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">                if (<i class=\"cond-miss\">iterator.call(null, arr[i], i)</i>) break</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">316</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">317</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">318</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">319</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">320</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Invoke handlers in batch process</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">321</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">322</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    batch: function(context, handlers/*, params*/ ) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">323</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">        var args = this.slice(arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">324</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">        args.shift()</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">325</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">        args.shift()</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">326</td>\n              <td class=\"hits\">11</td>\n              <td class=\"source\">        this.each(handlers, function(handler) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">327</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            if (handler) handler.apply(context, args)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">328</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        })</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">329</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">330</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">331</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  binding this context</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">332</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">333</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    bind: function(fn, ctx) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">334</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (fn.bind) return fn.bind(ctx)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"miss\">\n              <td class=\"line\">335</td>\n              <td class=\"hits\">0</td>\n              <td class=\"source\">        return function () {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"miss\">\n              <td class=\"line\">336</td>\n              <td class=\"hits\">0</td>\n              <td class=\"source\">            fn.apply(ctx, arguments)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">337</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">338</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">339</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">340</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Array.slice</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">341</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     */</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">342</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    slice: function(array) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">343</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        // return Array.prototype.slice.call(array)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">344</td>\n              <td class=\"hits\">269</td>\n              <td class=\"source\">        var i = array.length</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">345</td>\n              <td class=\"hits\">269</td>\n              <td class=\"source\">        var a = new Array(i)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">346</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        while(i) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">347</td>\n              <td class=\"hits\">181</td>\n              <td class=\"source\">            i --</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">348</td>\n              <td class=\"hits\">181</td>\n              <td class=\"source\">            a[i] = array[i]</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">349</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        }</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">350</td>\n              <td class=\"hits\">269</td>\n              <td class=\"source\">        return a</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">351</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">352</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    /**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">353</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     *  Merge for extObj to obj</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">354</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">     **/</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">355</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    merge: function(obj, extObj) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">356</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        this.each(extObj, function(value, key) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">357</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            if (extObj.hasOwnProperty(key)) obj[key] = value</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">358</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        })</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">359</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">        return obj</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">360</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">361</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    type: function (obj) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">362</td>\n              <td class=\"hits\">78</td>\n              <td class=\"source\">        return /\\[object ([a-zA-Z]+)\\]/.exec(Object.prototype.toString.call(obj))[1].toLowerCase()</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">363</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">364</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    missing: function (param, paramName) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">365</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (!param) throw new Error('Missing param: ' + paramName)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">366</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">367</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    want: function (obj, type) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">368</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        if (this.type(obj) != type) throw new Error('Want param ' + obj + ' type is a/an ' + type)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">369</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">370</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">371</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">372</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">/**</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">373</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> *  Link nodes data structure</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">374</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"> **/</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">375</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">function LinkNodes() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">376</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    var id = 1</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">377</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    this._link = []</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">378</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    this._map = {}</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">379</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">    this._allot = function() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">380</td>\n              <td class=\"hits\">75</td>\n              <td class=\"source\">        return id++</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">381</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">382</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">383</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">LinkNodes.prototype = {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">384</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    add: function(node) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">385</td>\n              <td class=\"hits\">75</td>\n              <td class=\"source\">        var id = this._allot()</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">386</td>\n              <td class=\"hits\">75</td>\n              <td class=\"source\">        this._map[id] = node</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">387</td>\n              <td class=\"hits\">75</td>\n              <td class=\"source\">        this._link.push(id)</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">388</td>\n              <td class=\"hits\">75</td>\n              <td class=\"source\">        return id</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">389</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">390</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    isLast: function (id) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">391</td>\n              <td class=\"hits\">67</td>\n              <td class=\"source\">        return this._link.indexOf(id) === this._link.length - 1</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">392</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">393</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    first: function() {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">394</td>\n              <td class=\"hits\">33</td>\n              <td class=\"source\">        return this._map[this._link[0]]</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">395</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">396</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    get: function(id) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">397</td>\n              <td class=\"hits\">69</td>\n              <td class=\"source\">        return this._map[id]</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">398</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">399</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    next: function(id) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">400</td>\n              <td class=\"hits\">32</td>\n              <td class=\"source\">        var cursor = this._link.indexOf(id) + 1</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">401</td>\n              <td class=\"hits\">32</td>\n              <td class=\"source\">        return this._map[this._link[cursor]]</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">402</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">403</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    getByProp: function (prop, value) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">404</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        var dest</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">405</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        var that = this</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">406</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        utils.some(this._link, function (id) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">407</td>\n              <td class=\"hits\">17</td>\n              <td class=\"source\">            var node = that.get(id)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">408</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            if (node[prop] === value) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">409</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">                dest = node</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">410</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">                return true</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">411</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">            } </td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">412</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">        })</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">413</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        return dest</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">414</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    },</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">415</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    isNextTo: function (nextId, preId) {</td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">416</td>\n              <td class=\"hits\">4</td>\n              <td class=\"source\">        return this._link.indexOf(nextId) > this._link.indexOf(preId)</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">417</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    }</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">418</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">}</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">419</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">420</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">421</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">// AMD/CMD/node/bang</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">422</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">if (typeof exports !== 'undefined') {</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">423</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">    if (typeof module !== 'undefined' && module.exports) exports = module.exports = Bootstrap</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">424</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n        \n        \n            <tr class=\"hit\">\n              <td class=\"line\">425</td>\n              <td class=\"hits\">1</td>\n              <td class=\"source\">    exports.Chain = Bootstrap</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">426</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\">} else this.Chain = Bootstrap</td>\n            </tr>\n        \n      \n        \n        \n            <tr>\n              <td class=\"line\">427</td>\n              <td class=\"hits\"></td>\n              <td class=\"source\"></td>\n            </tr>\n        \n      \n    </tbody>\n  </table>\n</div>");